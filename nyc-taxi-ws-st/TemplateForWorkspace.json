{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "nyc-taxi-ws-st"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"nyc-taxi-ws-st-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'nyc-taxi-ws-st-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:nyc-taxi-ws-st.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"nyc-taxi-ws-st-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://nyctaxistevandemo.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/yellowTransformation')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Notebook1",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "demo_nb",
								"type": "NotebookReference"
							},
							"snapshot": true,
							"conf": {
								"spark.dynamicAllocation.enabled": null,
								"spark.dynamicAllocation.minExecutors": null,
								"spark.dynamicAllocation.maxExecutors": null
							},
							"numExecutors": null
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "yellow*.parquet",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Parquet1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Parquet2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 10
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-01-20T00:21:06Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/demo_nb')]",
				"[concat(variables('workspaceId'), '/datasets/Parquet1')]",
				"[concat(variables('workspaceId'), '/datasets/Parquet2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Parquet1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "raw-data"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "tpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "tpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "passenger_count",
						"type": "DOUBLE"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "RatecodeID",
						"type": "DOUBLE"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "airport_fee",
						"type": "DOUBLE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Parquet2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "nyc-taxi-ws-st-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "step1_etl",
						"fileSystem": "nyctaxi"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "VendorID",
						"type": "INT64"
					},
					{
						"name": "tpep_pickup_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "tpep_dropoff_datetime",
						"type": "TIMESTAMP_MICROS"
					},
					{
						"name": "passenger_count",
						"type": "DOUBLE"
					},
					{
						"name": "trip_distance",
						"type": "DOUBLE"
					},
					{
						"name": "RatecodeID",
						"type": "DOUBLE"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "UTF8"
					},
					{
						"name": "PULocationID",
						"type": "INT64"
					},
					{
						"name": "DOLocationID",
						"type": "INT64"
					},
					{
						"name": "payment_type",
						"type": "INT64"
					},
					{
						"name": "fare_amount",
						"type": "DOUBLE"
					},
					{
						"name": "extra",
						"type": "DOUBLE"
					},
					{
						"name": "mta_tax",
						"type": "DOUBLE"
					},
					{
						"name": "tip_amount",
						"type": "DOUBLE"
					},
					{
						"name": "tolls_amount",
						"type": "DOUBLE"
					},
					{
						"name": "improvement_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "total_amount",
						"type": "DOUBLE"
					},
					{
						"name": "congestion_surcharge",
						"type": "DOUBLE"
					},
					{
						"name": "airport_fee",
						"type": "DOUBLE"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/nyc-taxi-ws-st-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nyc-taxi-ws-st-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('nyc-taxi-ws-st-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nyc-taxi-ws-st-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('nyc-taxi-ws-st-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/demo_nb')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "nyctaxisp",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "72a4b3d3-47f9-44bb-a92d-6a8a865271f6"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1",
						"state": {
							"cccdc546-310e-470b-a9e6-f4ccf6bd80f5": {
								"type": "Synapse.DataFrame",
								"sync_state": {
									"table": {
										"rows": [
											{
												"0": "2",
												"1": "2023-01-01 00:32:10",
												"2": "2023-01-01 00:40:36",
												"3": "1.0",
												"4": "0.97",
												"5": "1.0",
												"6": "N",
												"7": "161",
												"8": "141",
												"9": "2",
												"10": "9.3",
												"11": "1.0",
												"12": "0.5",
												"13": "0.0",
												"14": "0.0",
												"15": "1.0",
												"16": "14.3",
												"17": "2.5",
												"18": "0.0",
												"19": "abfss://nyctaxi@nyctaxistevandemo.dfs.core.windows.net/step1_etl/yellow_tripdata_2023-01.parquet",
												"20": "2023-01"
											},
											{
												"0": "2",
												"1": "2023-01-01 00:55:08",
												"2": "2023-01-01 01:01:27",
												"3": "1.0",
												"4": "1.1",
												"5": "1.0",
												"6": "N",
												"7": "43",
												"8": "237",
												"9": "1",
												"10": "7.9",
												"11": "1.0",
												"12": "0.5",
												"13": "4.0",
												"14": "0.0",
												"15": "1.0",
												"16": "16.9",
												"17": "2.5",
												"18": "0.0",
												"19": "abfss://nyctaxi@nyctaxistevandemo.dfs.core.windows.net/step1_etl/yellow_tripdata_2023-01.parquet",
												"20": "2023-01"
											},
											{
												"0": "2",
												"1": "2023-01-01 00:25:04",
												"2": "2023-01-01 00:37:49",
												"3": "1.0",
												"4": "2.51",
												"5": "1.0",
												"6": "N",
												"7": "48",
												"8": "238",
												"9": "1",
												"10": "14.9",
												"11": "1.0",
												"12": "0.5",
												"13": "15.0",
												"14": "0.0",
												"15": "1.0",
												"16": "34.9",
												"17": "2.5",
												"18": "0.0",
												"19": "abfss://nyctaxi@nyctaxistevandemo.dfs.core.windows.net/step1_etl/yellow_tripdata_2023-01.parquet",
												"20": "2023-01"
											}
										],
										"schema": [
											{
												"key": "0",
												"name": "VendorID",
												"type": "bigint"
											},
											{
												"key": "1",
												"name": "pickupDT",
												"type": "timestamp"
											},
											{
												"key": "2",
												"name": "dropoffDT",
												"type": "timestamp"
											},
											{
												"key": "3",
												"name": "passengerCount",
												"type": "double"
											},
											{
												"key": "4",
												"name": "tripDistance",
												"type": "double"
											},
											{
												"key": "5",
												"name": "ratecodeID",
												"type": "double"
											},
											{
												"key": "6",
												"name": "storeAndFwdFlag",
												"type": "string"
											},
											{
												"key": "7",
												"name": "puLocationId",
												"type": "bigint"
											},
											{
												"key": "8",
												"name": "doLocationId",
												"type": "bigint"
											},
											{
												"key": "9",
												"name": "paymentType",
												"type": "bigint"
											},
											{
												"key": "10",
												"name": "fareAmount",
												"type": "double"
											},
											{
												"key": "11",
												"name": "extra",
												"type": "double"
											},
											{
												"key": "12",
												"name": "mtaTax",
												"type": "double"
											},
											{
												"key": "13",
												"name": "tipAmount",
												"type": "double"
											},
											{
												"key": "14",
												"name": "tollsAmount",
												"type": "double"
											},
											{
												"key": "15",
												"name": "improvementSurcharge",
												"type": "double"
											},
											{
												"key": "16",
												"name": "totalAmount",
												"type": "double"
											},
											{
												"key": "17",
												"name": "congestionSurcharge",
												"type": "double"
											},
											{
												"key": "18",
												"name": "airportFee",
												"type": "double"
											},
											{
												"key": "19",
												"name": "fileName",
												"type": "string"
											},
											{
												"key": "20",
												"name": "timePeriod",
												"type": "string"
											}
										],
										"truncated": false
									},
									"isSummary": false,
									"language": "scala"
								},
								"persist_state": {
									"view": {
										"type": "details",
										"chartOptions": {
											"chartType": "bar",
											"aggregationType": "sum",
											"categoryFieldKeys": [
												"1"
											],
											"seriesFieldKeys": [
												"0"
											],
											"isStacked": false
										}
									}
								}
							}
						}
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/c3f46110-c435-4bdb-8e72-1abba94bc28f/resourceGroups/nyc_taxi/providers/Microsoft.Synapse/workspaces/nyc-taxi-ws-st/bigDataPools/nyctaxisp",
						"name": "nyctaxisp",
						"type": "Spark",
						"endpoint": "https://nyc-taxi-ws-st.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/nyctaxisp",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net",
							"authHeader": null
						},
						"sparkVersion": "3.3",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28,
						"extraHeader": null
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import input_file_name, regexp_extract\r\n",
							"from notebookutils import mssparkutils\r\n",
							"import pandas as pd\r\n",
							"from functools import reduce"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"sourceDirLocation = \"abfss://nyctaxi@nyctaxistevandemo.dfs.core.windows.net/step1_etl/\""
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Concatenating the Newly Uploaded Files"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							}
						},
						"source": [
							"%%pyspark\r\n",
							"files = mssparkutils.fs.ls(sourceDirLocation)\r\n",
							"\r\n",
							"for file in files:\r\n",
							"    print(file.name)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							"df = pd.DataFrame()\r\n",
							"df_list = []\r\n",
							"for file in files:\r\n",
							"    temp_df = spark.read.parquet(sourceDirLocation + file.name)\r\n",
							"    temp_df = temp_df.withColumn(\"file_name\",input_file_name())\r\n",
							"    temp_df = temp_df.withColumn(\"timePeriod\",regexp_extract(\"file_name\",pattern = r\"(?<=tripdata_).*(?=.parquet)\",idx = 0 ))\r\n",
							"    df_list.append(temp_df)\r\n",
							"df = reduce(lambda x,y:x.union(y),df_list)\r\n",
							"\r\n",
							""
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Changing Column Names"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df.columns"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = (df\n",
							"    .withColumnRenamed('tpep_pickup_datetime','pickupDT')\n",
							"    .withColumnRenamed('tpep_dropoff_datetime','dropoffDT')\n",
							"    .withColumnRenamed('passenger_count','passengerCount')\n",
							"    .withColumnRenamed('trip_distance','tripDistance')\n",
							"    .withColumnRenamed('RatecodeID','ratecodeID')\n",
							"    .withColumnRenamed('store_and_fwd_flag','storeAndFwdFlag')\n",
							"    .withColumnRenamed('PULocationID','puLocationId')\n",
							"    .withColumnRenamed('DOLocationID','doLocationId')\n",
							"    .withColumnRenamed('payment_type','paymentType')\n",
							"    .withColumnRenamed('fare_amount','fareAmount')\n",
							"    .withColumnRenamed('mta_tax','mtaTax')\n",
							"    .withColumnRenamed('tip_amount','tipAmount')\n",
							"    .withColumnRenamed('tolls_amount','tollsAmount')\n",
							"    .withColumnRenamed('improvement_surcharge','improvementSurcharge')\n",
							"    .withColumnRenamed('total_amount','totalAmount')\n",
							"    .withColumnRenamed('congestion_surcharge','congestionSurcharge')\n",
							"    .withColumnRenamed('airport_fee','airportFee')\n",
							"    .withColumnRenamed('file_name','fileName')\n",
							"    )"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(df.limit(3))"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## Uploading the Data to Database Table"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\n",
							"spark.sql(\"CREATE DATABASE IF NOT EXISTS nyctaxi\")\n",
							"df.write.mode(\"append\").saveAsTable(\"nyctaxi.yellow2023\")"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nyctaxisp')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 5
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.3",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "eastus"
		}
	]
}