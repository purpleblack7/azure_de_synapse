{
	"name": "demo_nb",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "nyctaxisp",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "72a4b3d3-47f9-44bb-a92d-6a8a865271f6"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1",
				"state": {
					"cccdc546-310e-470b-a9e6-f4ccf6bd80f5": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "2",
										"1": "2023-01-01 00:32:10",
										"2": "2023-01-01 00:40:36",
										"3": "1.0",
										"4": "0.97",
										"5": "1.0",
										"6": "N",
										"7": "161",
										"8": "141",
										"9": "2",
										"10": "9.3",
										"11": "1.0",
										"12": "0.5",
										"13": "0.0",
										"14": "0.0",
										"15": "1.0",
										"16": "14.3",
										"17": "2.5",
										"18": "0.0",
										"19": "abfss://nyctaxi@nyctaxistevandemo.dfs.core.windows.net/step1_etl/yellow_tripdata_2023-01.parquet",
										"20": "2023-01"
									},
									{
										"0": "2",
										"1": "2023-01-01 00:55:08",
										"2": "2023-01-01 01:01:27",
										"3": "1.0",
										"4": "1.1",
										"5": "1.0",
										"6": "N",
										"7": "43",
										"8": "237",
										"9": "1",
										"10": "7.9",
										"11": "1.0",
										"12": "0.5",
										"13": "4.0",
										"14": "0.0",
										"15": "1.0",
										"16": "16.9",
										"17": "2.5",
										"18": "0.0",
										"19": "abfss://nyctaxi@nyctaxistevandemo.dfs.core.windows.net/step1_etl/yellow_tripdata_2023-01.parquet",
										"20": "2023-01"
									},
									{
										"0": "2",
										"1": "2023-01-01 00:25:04",
										"2": "2023-01-01 00:37:49",
										"3": "1.0",
										"4": "2.51",
										"5": "1.0",
										"6": "N",
										"7": "48",
										"8": "238",
										"9": "1",
										"10": "14.9",
										"11": "1.0",
										"12": "0.5",
										"13": "15.0",
										"14": "0.0",
										"15": "1.0",
										"16": "34.9",
										"17": "2.5",
										"18": "0.0",
										"19": "abfss://nyctaxi@nyctaxistevandemo.dfs.core.windows.net/step1_etl/yellow_tripdata_2023-01.parquet",
										"20": "2023-01"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "VendorID",
										"type": "bigint"
									},
									{
										"key": "1",
										"name": "pickupDT",
										"type": "timestamp"
									},
									{
										"key": "2",
										"name": "dropoffDT",
										"type": "timestamp"
									},
									{
										"key": "3",
										"name": "passengerCount",
										"type": "double"
									},
									{
										"key": "4",
										"name": "tripDistance",
										"type": "double"
									},
									{
										"key": "5",
										"name": "ratecodeID",
										"type": "double"
									},
									{
										"key": "6",
										"name": "storeAndFwdFlag",
										"type": "string"
									},
									{
										"key": "7",
										"name": "puLocationId",
										"type": "bigint"
									},
									{
										"key": "8",
										"name": "doLocationId",
										"type": "bigint"
									},
									{
										"key": "9",
										"name": "paymentType",
										"type": "bigint"
									},
									{
										"key": "10",
										"name": "fareAmount",
										"type": "double"
									},
									{
										"key": "11",
										"name": "extra",
										"type": "double"
									},
									{
										"key": "12",
										"name": "mtaTax",
										"type": "double"
									},
									{
										"key": "13",
										"name": "tipAmount",
										"type": "double"
									},
									{
										"key": "14",
										"name": "tollsAmount",
										"type": "double"
									},
									{
										"key": "15",
										"name": "improvementSurcharge",
										"type": "double"
									},
									{
										"key": "16",
										"name": "totalAmount",
										"type": "double"
									},
									{
										"key": "17",
										"name": "congestionSurcharge",
										"type": "double"
									},
									{
										"key": "18",
										"name": "airportFee",
										"type": "double"
									},
									{
										"key": "19",
										"name": "fileName",
										"type": "string"
									},
									{
										"key": "20",
										"name": "timePeriod",
										"type": "string"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"1"
									],
									"seriesFieldKeys": [
										"0"
									],
									"isStacked": false
								}
							}
						}
					}
				}
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/c3f46110-c435-4bdb-8e72-1abba94bc28f/resourceGroups/nyc_taxi/providers/Microsoft.Synapse/workspaces/nyc-taxi-ws-st/bigDataPools/nyctaxisp",
				"name": "nyctaxisp",
				"type": "Spark",
				"endpoint": "https://nyc-taxi-ws-st.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/nyctaxisp",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import input_file_name, regexp_extract\r\n",
					"from notebookutils import mssparkutils\r\n",
					"import pandas as pd\r\n",
					"from functools import reduce"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"sourceDirLocation = \"abfss://nyctaxi@nyctaxistevandemo.dfs.core.windows.net/step1_etl/\""
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Concatenating the Newly Uploaded Files"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"files = mssparkutils.fs.ls(sourceDirLocation)\r\n",
					"\r\n",
					"for file in files:\r\n",
					"    print(file.name)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df = pd.DataFrame()\r\n",
					"df_list = []\r\n",
					"for file in files:\r\n",
					"    temp_df = spark.read.parquet(sourceDirLocation + file.name)\r\n",
					"    temp_df = temp_df.withColumn(\"file_name\",input_file_name())\r\n",
					"    temp_df = temp_df.withColumn(\"timePeriod\",regexp_extract(\"file_name\",pattern = r\"(?<=tripdata_).*(?=.parquet)\",idx = 0 ))\r\n",
					"    df_list.append(temp_df)\r\n",
					"df = reduce(lambda x,y:x.union(y),df_list)\r\n",
					"\r\n",
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Changing Column Names"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.columns"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = (df\n",
					"    .withColumnRenamed('tpep_pickup_datetime','pickupDT')\n",
					"    .withColumnRenamed('tpep_dropoff_datetime','dropoffDT')\n",
					"    .withColumnRenamed('passenger_count','passengerCount')\n",
					"    .withColumnRenamed('trip_distance','tripDistance')\n",
					"    .withColumnRenamed('RatecodeID','ratecodeID')\n",
					"    .withColumnRenamed('store_and_fwd_flag','storeAndFwdFlag')\n",
					"    .withColumnRenamed('PULocationID','puLocationId')\n",
					"    .withColumnRenamed('DOLocationID','doLocationId')\n",
					"    .withColumnRenamed('payment_type','paymentType')\n",
					"    .withColumnRenamed('fare_amount','fareAmount')\n",
					"    .withColumnRenamed('mta_tax','mtaTax')\n",
					"    .withColumnRenamed('tip_amount','tipAmount')\n",
					"    .withColumnRenamed('tolls_amount','tollsAmount')\n",
					"    .withColumnRenamed('improvement_surcharge','improvementSurcharge')\n",
					"    .withColumnRenamed('total_amount','totalAmount')\n",
					"    .withColumnRenamed('congestion_surcharge','congestionSurcharge')\n",
					"    .withColumnRenamed('airport_fee','airportFee')\n",
					"    .withColumnRenamed('file_name','fileName')\n",
					"    )"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df.limit(3))"
				],
				"execution_count": 14
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"## Uploading the Data to Database Table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\n",
					"spark.sql(\"CREATE DATABASE IF NOT EXISTS nyctaxi\")\n",
					"df.write.mode(\"append\").saveAsTable(\"nyctaxi.yellow2023\")"
				],
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			}
		]
	}
}